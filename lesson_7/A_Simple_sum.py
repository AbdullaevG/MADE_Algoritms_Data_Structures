"""
A. –°—É–º–º–∞ –ø—Ä–æ—Å—Ç–∞—è

–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 1 —Å–µ–∫—É–Ω–¥–∞
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 512 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–í–∞–º –Ω—É–∂–Ω–æ –Ω–∞—É—á–∏—Ç—å—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å ¬´—Å—É–º–º–∞ —á–∏—Å–µ–ª –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ¬ª.

–ú–∞—Å—Å–∏–≤ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è. –ó–∞–ø—Ä–æ—Å–æ–≤ –º–Ω–æ–≥–æ. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É–µ—Ç –∑–∞ O(1).

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ ‚Äî n –∏ —á–∏—Å–ª–∞ x, y, a_0, –ø–æ—Ä–æ–∂–¥–∞—é—â–∏–µ –º–∞—Å—Å–∏–≤ a: a_i=(x‚ãÖa_{i‚àí1}+y)mod2^16
–î–∞–ª–µ–µ —Å–ª–µ–¥—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ m –∏ —á–∏—Å–ª–∞ z, t, b_0, –ø–æ—Ä–æ–∂–¥–∞—é—â–∏–µ –º–∞—Å—Å–∏–≤ b: b_i=(z‚ãÖb_{i‚àí1}+t)mod2^30.

–ú–∞—Å—Å–∏–≤ c —Å—Ç—Ä–æ–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: c_i=b_i mod n.

–ó–∞–ø—Ä–æ—Å—ã: i-–π –∏–∑ –Ω–∏—Ö ‚Äî –Ω–∞–π—Ç–∏ —Å—É–º–º—É –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ –æ—Ç min(c_{2i},c_{2i+1}) –¥–æ max(c_{2i},c_{2i+1}) –≤ –º–∞—Å—Å–∏–≤–µ a.

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: 1‚â§n‚â§10^7, 0‚â§m‚â§10^7. –í—Å–µ —á–∏—Å–ª–∞ —Ü–µ–ª—ã–µ –æ—Ç 0 –¥–æ 2^16. t –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–æ ‚àí1.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—Å–µ—Ö —Å—É–º–º.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
3 1 2 3
3 1 -1 4
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
23

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
ùëé={3,5,7},ùëè={4,3,2,1,0,230‚àí1},ùëê={1,0,2,1,0,0},
–∑–∞–ø—Ä–æ—Å—ã = {[0,1],[1,2],[0,0]}, —Å—É–º–º—ã = {8,12,3}.

–ü—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ —Å—É–º–º—ã, –∫–∞–∫ –Ω–∞ –ª–µ–∫—Ü–∏–∏
"""


import sys

UPPER_BOUND_IN_ARRAY = 1 << 16
UPPER_BOUND_IN_QUERY = 1 << 30


def cum_sums(size: int, sequence: list) -> list:
    cum_sums_values = [0] * size
    temp_sum_value = 0
    
    for i in range(size):
        temp_sum_value += sequence[i]
        cum_sums_values[i] = temp_sum_value
        
    return cum_sums_values

def get_sum(cum_sums_list, left, right) -> int:
    
    if left > 0:
        return cum_sums_list[right] - cum_sums_list[left - 1]
    
    else:
        return cum_sums_list[right]

def main():

    data = sys.stdin.readlines()
    
    n, x, y, seq_0 = map(int, data[0].strip().split())
    m, z, t, query_0 = map(int, data[1].strip().split())
    
    query_list = [query_0] + [0] * (2 * m - 1)
    sequence = [seq_0] + [0] * (n - 1)
    
    for i in range(1, n):
        sequence[i] = (x * sequence[i - 1] + y) % UPPER_BOUND_IN_ARRAY
        
    cum_sums_list = cum_sums(n, sequence)
    total_sum = 0
    
    for i in range(1, 2 * m):
        query_list[i] = (z * query_list[i - 1] + t) % UPPER_BOUND_IN_QUERY
        
        if i % 2 == 1:
            left, right = min(query_list[i - 1] % n, query_list[i] % n), max(query_list[i - 1] % n, query_list[i] % n)
            total_sum += get_sum(cum_sums_list, left, right)  
        
    print(total_sum)

    
if __name__ == "__main__":
    main()
